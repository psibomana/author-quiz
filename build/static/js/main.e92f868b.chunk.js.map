{"version":3,"sources":["js/utils.js","js/AuthorQuiz.js","js/serviceWorker.js","index.js"],"names":["authors","name","imageUrl","imageSource","books","imageAttribution","getTurnData","allBooks","reduce","p","c","i","concat","fourRandomBooks","shuffle","slice","answer","sample","author","find","some","title","Continue","props","react_default","a","createElement","className","show","onClick","onContinue","AuthorTitles","highlight","AuthorImage","map","Title","key","onAnswerSelected","classNameValue","none","correct","wrong","id","src","alt","Header","Footer","href","AuthorQuiz","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","data","state","bind","assertThisInitialized","event","target","isCorrect","book","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","js_AuthorQuiz","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e92f868b.chunk.js","sourcesContent":["import {shuffle, sample} from 'underscore';\n\n\nconst authors = [\n  {\n    name: 'Mark Twain',\n    imageUrl: 'images/authors/marktwain.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['The Adventures of Huckleberry Finn']\n  },\n  {\n    name: 'Joseph Conrad',\n    imageUrl: 'images/authors/josephconrad.png',\n    imageSource: 'Wikimedia Commons',\n    books: ['Heart of Darkness']\n  },\n  {\n    name: 'J.K. Rowling',\n    imageUrl: 'images/authors/jkrowling.jpg',\n    imageSource: 'Wikimedia Commons',\n    imageAttribution: 'Daniel Ogren',\n    books: ['Harry Potter and the Sorcerers Stone']\n  },\n  {\n    name: 'Stephen King',\n    imageUrl: 'images/authors/stephenking.jpg',\n    imageSource: 'Wikimedia Commons',\n    imageAttribution: 'Pinguino',\n    books: ['The Shining', 'IT']\n  },\n  {\n    name: 'Charles Dickens',\n    imageUrl: 'images/authors/charlesdickens.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['David Copperfield', 'A Tale of Two Cities']\n  },\n  {\n    name: 'William Shakespeare',\n    imageUrl: 'images/authors/williamshakespeare.jpg',\n    imageSource: 'Wikimedia Commons',\n    books: ['Hamlet', 'Macbeth', 'Romeo and Juliet']\n  }\n];\n\nexport function getTurnData() {\n  const allBooks = authors.reduce((p, c, i) => {\n      return p.concat(c.books);\n  }, []);\n  const fourRandomBooks = shuffle(allBooks).slice(0,4);\n  const answer = sample(fourRandomBooks);\n\n  return {\n      books: fourRandomBooks,\n      author: authors.find((author) =>\n          author.books.some((title) =>\n              title === answer))\n  }\n}\n","import React, { Component } from 'react';\nimport {getTurnData} from './utils';\nimport '../css/bootstrap.min.css';\nimport '../css/index.css';\n\n/**\n * Author Quiz Component\n */\nclass AuthorQuiz extends Component {\n\n  /**\n   * Constructor Method\n   */\n  constructor() {\n    super();\n    const data = getTurnData();\n    this.state = {\n      books: data.books,\n      author: data.author,\n      highlight: ''\n    };\n    this.onAnswerSelected = this.onAnswerSelected.bind(this);\n    this.onContinue = this.onContinue.bind(this);\n  }\n\n  /**\n   * Event Handler of the title selection.\n   * @param {object} event\n   */\n  onAnswerSelected(event) {\n    const answer = event.target.id;\n    const isCorrect = this.state.author.books.some((book) => book === answer);\n    this.setState({\n      highlight: isCorrect ? 'correct' : 'wrong'\n    });\n  }\n\n  onContinue() {\n    const data = getTurnData();\n    this.setState({\n        books: data.books,\n        author: data.author,\n        highlight: ''\n    });\n  }\n\n  render() {\n    return(\n      <div className=\"container AuthorQuiz\">\n        <Header />\n        <AuthorTitles\n          books = {this.state.books}\n          author = {this.state.author}\n          onAnswerSelected = {this.onAnswerSelected}\n          highlight = {this.state.highlight}\n          onContinue = {this.onContinue}\n        />\n        <Footer />\n      </div>\n    )\n  }\n}\n\n/**\n * Continue button to reset author and titiles.\n * @param {object} props\n */\nfunction Continue(props) {\n  return (\n    <div className=\"row continue v-offset-10\">\n    { props.show\n      ? <div className=\"col-12\">\n          <button className=\"btn btn-primary btn-sm float-center\" onClick={props.onContinue}>Continue</button>\n        </div>\n      : null }\n    </div>\n  );\n}\n\n/**\n * Author and Titles Component\n * @param {object} props\n */\nfunction AuthorTitles(props) {\n\n  const show = props.highlight === 'correct';\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-4\">\n        <AuthorImage author = {props.author} />\n      </div>\n      <div className=\"col-md-8\">\n        {\n          props.books.map((title) =>\n              <Title\n                title={title}\n                key={title}\n                onAnswerSelected={props.onAnswerSelected}\n                highlight={props.highlight}/>\n          )\n        }\n\n        <Continue\n          show = {show}\n          onContinue = {props.onContinue}/>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Individual Title Component.\n * @param {object} props\n */\nfunction Title(props) {\n\n  /**\n   * Maps the value of the highlight to the value\n   * of the style\n   * @param {string} highlight\n   */\n  function highlightToBgColor(highlight) {\n    const mapping = {\n      'none': 'list-group-item-light',\n      'correct': 'list-group-item-success',\n      'wrong': 'list-group-item-danger'\n    };\n    return mapping[highlight];\n  }\n\n  // Default class name value for list group\n  let classNameValue = \"list-group-item list-group-item-action \";\n  classNameValue += highlightToBgColor(props.highlight);\n\n  return (\n    <h4\n      className={classNameValue}\n      onClick={props.onAnswerSelected}\n      id={props.title} >\n      {props.title}\n    </h4>\n  )\n}\n\n/**\n * Author Image Component\n * @param {object} props\n */\nfunction AuthorImage(props) {\n  return (\n    <img src={props.author.imageUrl} className=\"authorimage\" alt=\"Author\"/>\n  )\n}\n\n/**\n * Author Quiz Header Component\n * @param {object} props\n */\nfunction Header(props) {\n  return (\n    <div className=\"row\">\n      <div className=\"col-md-12\">\n        <div className=\"jumbotron\">\n          <h1 className=\"display-4\">Author Quiz</h1>\n          <p>Select the book written by the author shown</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n/**\n * Author Quiz Footer Component\n * @param {object} props\n */\nfunction Footer(props) {\n  return (\n      <div className=\"row v-offset-10\">\n        <div className=\"col-md-12\">\n          <footer>\n            <p className=\"text-muted credit\">\n              All images are from <a href=\"http://commons.wikimedia.org/wiki/Main_Page\">Wikemedia Commons</a>\n              and are in the public domain.\n            </p>\n          </footer>\n        </div>\n      </div>\n  )\n}\n\nexport default AuthorQuiz;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport AuthorQuiz from './js/AuthorQuiz';\nimport * as serviceWorker from './js/serviceWorker';\n\n\nReactDOM.render(<AuthorQuiz/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}